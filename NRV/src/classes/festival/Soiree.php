<?php

namespace nrv\festival;

use nrv\exception\InvalidPropertyNameException;

/**
 * Soiree class
 *
 * Represents a festival event
 */
class Soiree {

    /** @var int unique identifier */
    private int $id; // Autogenerated
    /** @var string name */
    private string $nom;
    /** @var string thematic */
    private string $thematique;
    /** @var string date */
    private string $date;
    /** @var string start time */
    private string $horaire_debut;
    /** @var string end time */
    private string $horaire_fin;
    /** @var int location identifier */
    private int $id_lieu;
    /** @var int price */
    private int $tarif;

    /**
     * Constructor
     * @param string $nom name
     * @param string $thematique thematic
     * @param string $date date
     * @param string $horaire_debut start time
     * @param string $horaire_fin end time
     * @param int $id_lieu location identifier
     * @param int $tarif price
     */
    public function __construct(string $nom, string $thematique, string $date, string $horaire_debut, string $horaire_fin, int $id_lieu, int $tarif) {
        $this->nom = $nom;
        $this->thematique = $thematique;
        $this->date = $date;
        $this->horaire_debut = $horaire_debut;
        $this->horaire_fin = $horaire_fin;
        $this->id_lieu = $id_lieu;
        $this->tarif = $tarif;
    }

    /**
     * Set the unique identifier
     * @param int $id unique identifier
     * @return void
     */
    public function setId(int $id): void {
        $this->id = $id;
    }

    /**
     * Magic method to get the value of an attribute
     * @param string $attrName name of the attribute
     * @return mixed value of the attribute
     * @throws InvalidPropertyNameException
     */
    public function __get(string $attrName) : mixed {
        if (property_exists($this, $attrName)) {
            return $this->$attrName;
        } else {
            throw new InvalidPropertyNameException("Propriété $attrName inexistante");
        }
    }
}